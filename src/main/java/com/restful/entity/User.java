package com.restful.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;

import javax.persistence.*;
import java.util.UUID;

@EqualsAndHashCode
@Entity @Table(name="users")
@Data @NoArgsConstructor @AllArgsConstructor
@Builder
@JsonInclude(JsonInclude.Include.NON_NULL)
public class User {
    @Id
    @GeneratedValue(generator = "haha")
    @GenericGenerator(name="haha", strategy = "org.hibernate.id.UUIDGenerator")
    @Column(columnDefinition = "VARCHAR(36)")
    @Type(type="uuid-char")
    private UUID id;

    @Column(name="name")
    private String name;

    @Column(name="email")
    private String email;

    @Column(name="password")
    private String password;

    @JsonIgnore
    private boolean isDeleted;
}

/**
 * @GeneratedValue(generator = "uuid"):
 *
 * This annotation is used to specify that the value of primary key is automatically generated, rather than being mannually provided.
 *
 * (generator = "uuid") this part refers to the custom generator that will be used to generate ID
 *
 * @GenericGenerator(name="uuid", strategy = "org.hibernate.id.UUIDGenerator"):
 *
 * This annotation is specific to Hibernate and defines a custom generator for the ID field.
 * Hibernate provides several strategies for generating primary keys, and here we are using UUID's
 *
 * name = "uuid" :- this assigns a name uuid to custom generator. we can actually give any name in this section but have to match with the generator i.e,. in the @GeneratedValue annotation The name is referenced in @GeneratedValue annotation
 * strategy = "org.hibernate.id.UUIDGenerator" :- this defines a strategy that is being used to generate ID, and the value provided in this case is a class
 *
 * How it generates UNIVERSALLY UNIQUE ID's:
 *
 * 1. UUID format:
 * a UUID is a 128-bit value, ususally represented as 36 characters with 4 hyphens
 * the version-4 UUID generated by UUID.randomUUID() consists of 122 random bits with 6 bits used for versioning
 *
 * this means the no. of possible UUID's are 2^122. so, the possiblity of getting collosion is very small
 */